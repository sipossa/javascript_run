this와 Arrow function
 
this를 바인딩할 때 왜 화살표함수를 쓰는지 한가지 문제 상황을 살펴보겠다.
아래 콜백함수는 undefined를 출력하고 있다.
콜백함수(setTimeout) 내부의 this는 전역 객체 window를 가리킨다.
myVar 프로퍼티는 window가 아니라 obj의 프로퍼티이기 때문에 오류가 발생한 것이다.

let obj = {
  myVar: 'foo',
  myFunc: function() { 
    console.log(this.myVar)   
    setTimeout(function() {
      console.log(this.myVar)
    }, 1000)
  }
}
obj.myFunc() // foo ... then... undefined
 

이것을 해결하기 위한 3가지 방법을 소개하겠다. 

1. this를 변수에 할당하는 것이다. 
let obj = {
  myVar: 'foo',
  myFunc: function() { 
    let self = this
    console.log(this.myVar)  
    setTimeout(function() {
      console.log(self.myVar)
    }, 1000)
  }
}
obj.myFunc() // foo ... then... foo
2. 두번 째 방법은 bind,call,apply를 활용하는 것이다.
let obj = {
  myVar: 'foo',
  myFunc: function() { 
    console.log(this.myVar)  
    setTimeout(function() {
      console.log(this.myVar)
    }.bind(this), 1000)
  }
}
obj.myFunc() // foo ... then... foo
3. 세번 째 방법은 아래 arrow function을 사용하는 것이다. (가장 명확한 솔루션)
let obj = {
  myVar: 'foo',
  myFunc: function() { 
    console.log(this.myVar)  
    setTimeout(() => {
      console.log(this.myVar)
    }, 1000)
  }
}
obj.myFunc() // foo ... then... foo